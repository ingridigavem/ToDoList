using Microsoft.Extensions.Caching.Memory;
using Moq;
using ToDoList.Domain.Shared.DTOs;
using ToDoList.Domain.ToDoList.Entities;
using ToDoList.Domain.ToDoList.UseCases.CreateToDo;
using ToDoList.Domain.ToDoList.UseCases.CreateToDo.Contracts;
using ToDoList.Test.TestUtils;

namespace ToDoList.Test.Domain.ToDoList;
public class CreateToDoTest {
    Mock<ICreateToDoRepository> repository = new Mock<ICreateToDoRepository>();
    Mock<IMemoryCache> cache = new Mock<IMemoryCache>();
    private const string CACHE_KEY = "ToDoList";
    private const int INVALID_MAXIMUM_LENGTH_DESCRIPTION_EXAMPLE = 151;
    private const int VALID_LENGTH_DESCRIPTION_EXAMPLE = 20;

    [Fact]
    public async Task ShouldCreateNewToDo() {
        var autoGeneratedValidDescription = Utils.GenerateString(VALID_LENGTH_DESCRIPTION_EXAMPLE);

        repository.Setup(x => x.SaveToDo(It.IsAny<ToDo>())).Returns(Task.FromResult(new ToDo { Description = autoGeneratedValidDescription }));
        cache.Setup(x => x.CreateEntry(CACHE_KEY));

        var handler = new CreateToDoHandler(repository.Object, cache.Object);

        var request = new CreateToDoRequest(autoGeneratedValidDescription);
        var result = await handler.Handle(request);

        Assert.IsType<Result<CreateToDoResponse>>(result);
        Assert.IsType<CreateToDoResponse>(result.Data);
        Assert.Empty(result.Errors);
        Assert.IsType<Guid>(result.Data.Id);
    }

    [Fact]
    public async void ShouldNotCreateNewToDoWhenDescriptionMaximumLengthExceeded() {
        var invalidDescriptionLength = Utils.GenerateString(INVALID_MAXIMUM_LENGTH_DESCRIPTION_EXAMPLE);

        repository.Setup(x => x.SaveToDo(It.IsAny<ToDo>())).Returns(Task.FromResult(new ToDo { Description = invalidDescriptionLength }));
        cache.Setup(x => x.CreateEntry(CACHE_KEY));

        var handler = new CreateToDoHandler(repository.Object, cache.Object);

        var request = new CreateToDoRequest(invalidDescriptionLength);
        var result = await handler.Handle(request);

        Assert.NotEmpty(result.Errors);
        Assert.Null(result.Data);
        Assert.Null(result.ExceptionMessage);
    }

    [Theory]
    [InlineData("")]
    [InlineData("X")]
    [InlineData("XX")]
    [InlineData(null)]
    public async void ShouldNotCreateNewToDoWhenDescriptionLengthLowerThanMinimumOrEmptyOrNull(string description) {
        repository.Setup(x => x.SaveToDo(It.IsAny<ToDo>())).Returns(Task.FromResult(new ToDo { Description = description }));
        cache.Setup(x => x.CreateEntry(CACHE_KEY));

        var handler = new CreateToDoHandler(repository.Object, cache.Object);

        var request = new CreateToDoRequest(description);
        var result = await handler.Handle(request);

        Assert.NotEmpty(result.Errors);
        Assert.Null(result.Data);
        Assert.Null(result.ExceptionMessage);
    }

    [Fact]
    public async void ShouldReturnResultWithErrorsListMessageGreaterThanZeroAndExceptionMessageNotNull() {
        var autoGeneratedValidDescription = Utils.GenerateString(VALID_LENGTH_DESCRIPTION_EXAMPLE);

        repository.Setup(x => x.SaveToDo(It.IsAny<ToDo>())).Throws(new Exception()); ;
        cache.Setup(x => x.CreateEntry(CACHE_KEY));

        var handler = new CreateToDoHandler(repository.Object, cache.Object);

        var request = new CreateToDoRequest(autoGeneratedValidDescription);
        var result = await handler.Handle(request);

        Assert.NotEmpty(result.Errors);
        Assert.NotEmpty(result.ExceptionMessage);
        Assert.Null(result.Data);
    }
}
